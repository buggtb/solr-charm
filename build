#!/bin/bash -e
#
# Push and release a SINGLE MULTISERIES CHARM to the charm store,
# from a local checkout dir.
#   - Charm series metadata is required.
#   - Take no action if env var CHARM_PUSH_DRY_RUN is True.
#   - Listen for Jenkins $WORKSPACE env var and use it if found.

branch="$2"
charm="$1"
usage="usage: push-and-release charmname <master||stable||stable/nn.nn>

NOTE:
  - Now enforcing series declarations in metadata.yaml.  All charms must
    declare at least one series.
"

if [ -z "$charm" ] || [ -z "$branch" ]; then
    echo -e "$usage"
    exit 1
fi

# Override charm dir when driven by Jenkins.
# Otherwise, use cmd param provided.
if [ -n "$WORKSPACE" ]; then
    # Driven by Jenkins.
    charm_dir="$WORKSPACE/$charm"
else
    # Expect a local checkout in the current dir.
    charm_dir="$charm"
fi
#if [ ! -d $charm_dir ]; then
#    echo "$charm_dir dir does not exist, cannot push."
#    exit 1
#fi


# Build if necessary, use build dir if already built.
#if [[ -n "$BUILT_ASSET_DIR" ]]; then
#    echo " . $charm is a built charm asset"
#    charm_dir="$BUILT_ASSET_DIR"

#elif grep "^\[testenv:build\]$" $charm_dir/tox.ini &> /dev/null &&\
#     [[ ! -f "$charm_dir/.build.manifest" ]] &&\
#     [[ ! -f "$charm_dir/src/.build.manifest" ]]; then

    # Build!
#    echo " . $charm ($charm_dir) needs to build before pushing or releasing"

    # Source it to preserve BUILT_ASSET_DIR, etc.
 #   . build-charm $charm_dir

    # Check for required value
#    [[ -z "$BUILT_ASSET_DIR" ]] && (echo " ! Built charm asset dir invalid"; exit 1)

    # Use the built charm asset dir instead of the checked out repo dir
#    charm_dir="$BUILT_ASSET_DIR"
#else
#    echo " . $charm ($charm_dir) does not need to build before pushing or releasing"
#fi

charm build .

# Expect series metadata and set expected build dir
if grep '^\"\?series\"\?:$' $charm_dir/src/metadata.yaml &> /dev/null; then
  echo " . $charm_dir is a multi-series charm based on its metadata.yaml"
  EXPECTED_BUILD_DIR="$charm_dir/build/builds/$charm_name"
else
  echo "WARN: $charm_dir does not declare series in metadata. Multi-series metadata is enforced on push/release."
  EXPECTED_BUILD_DIR="$charm_dir/build/trusty/$charm_name"
fi


# Locate metadata.yaml for charm
metadata=$(find $JUJU_REPOSITORY/builds/$charm_dir -name "metadata.yaml")
echo " . charm metadata file: $metadata"

# Check that series metadata exists
if ! grep '^\"series\":' $metadata &> /dev/null; then
    echo " ! $charm does not declare series in metadata (required)."
    exit 1
fi


charm_store_url="~spiculecharms/${charm}"

# Wrapper to deal with potential charm store timeouts
retry_command() {
    command=$@
    if [ "${CHARM_PUSH_DRY_RUN^^}" == "TRUE" ]; then
        echo "url $charm DRY RUN for:  $command"
        command=":"
    fi
    i=0
    attempts=10
    while [ $i -lt $attempts ]; do
        $command && break
        let "i+=1"
    done
}


# And, go!
echo -e "\n*$charm $branch*"
echo " + Generating repo info and adding as $charm_dir/repo-info"
#./generate-repo-info $charm_dir > $charm_dir/repo-info
echo "$(cat $charm_dir/repo-info | sed -e 's/^/   /')"

echo " + Pushing $charm_store_url from path: $charm_dir"
charm_push="$(retry_command charm push $JUJU_REPOSITORY/builds/$charm $charm_store_url)"
echo $charm_push

echo " . Checking charm ref"
charm_ref="$(echo $charm_push | grep -m 1 url | awk '{ print $2 }')"
echo $charm_ref
if [ -z "$charm_ref" ]; then
    echo " ! Failed to push charm to charm-store"
    exit 1
fi

# Collect charm_ref(s) in tmp file if available.  This is used by OSCI notifications.
cs_refs_released="$(mktemp)"
echo $charm_ref >> $cs_refs_released

echo " . Releasing charm $charm_ref"
retry_command charm release $charm_ref --channel $branch

echo " . Granting global read acl"
retry_command charm grant $charm_store_url --acl read everyone

echo " . Setting charm homepage and bugs-url options"

# Handle bug url overrides if present
#if grep "^$charm|" bug-link-overrides.txt; then
#   BUGS_URL=$(grep "^$charm|" bug-link-overrides.txt | cut -f 2 -d "|")
#else
#   BUGS_URL="https://bugs.launchpad.net/charms/+source/$charm/+filebug"
#fi

retry_command charm set $charm_store_url bugs-url=$BUGS_URL \
    homepage=https://github.com/openstack/charm-$charm

echo " . Charm store refs released:"
cat $cs_refs_released

# Save cs refs artifact if driven by Jenkins.  Otherwise, clean up cs refs temp file.
if [[ -n "$WORKSPACE" ]]; then
  mv -v $cs_refs_released $WORKSPACE/cs_refs_released.txt
else
  rm -fv $cs_refs_released
fi
